generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  phone     String?
  password  String?
  isVerified Boolean @default(false)
  role      String   @default("user")
  avatar    String?
  preferences String   @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  hotelBookings  HotelBooking[]
  flightBookings FlightBooking[]
  trainBookings  TrainBooking[]
  hotelReviews   HotelReview[]
  userSessions   UserSession[] @relation("UserSessions")
  paymentMethods PaymentMethod[]
  
  // NextAuth relations
  accounts Account[]
  sessions Session[]
  
  @@map("users")
}

model Hotel {
  id          String   @id @default(uuid())
  name        String
  description String
  address     String
  city        String
  state       String   @default("Jharkhand")
  pincode     String
  phone       String
  email       String?
  website     String?
  rating      Float    @default(4.0)
  reviewCount Int      @default(0)
  images      String     @default("[]")
  amenities   String     @default("[]")
  policies    String     @default("{}")
  latitude    Float?
  longitude   Float?
  checkInTime String   @default("14:00")
  checkOutTime String  @default("11:00")
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  priceRange  String   @default("budget")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  rooms    Room[]
  bookings HotelBooking[]
  reviews  HotelReview[]
  
  @@map("hotels")
}

model Room {
  id          String   @id @default(uuid())
  hotelId     String
  name        String
  type        String
  description String?
  maxGuests   Int      @default(2)
  basePrice   Float
  discountPrice Float?
  size        String?
  bedType     String   @default("double")
  view        String?
  images      String     @default("[]")
  amenities   String     @default("[]")
  totalRooms  Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  hotel        Hotel              @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  bookings     HotelBooking[]
  availability RoomAvailability[]
  inventory    RoomInventory[]
  
  @@map("rooms")
}

model HotelBooking {
  id          String   @id @default(uuid())
  userId      String
  hotelId     String
  roomId      String
  bookingRef  String   @unique
  checkIn     DateTime
  checkOut    DateTime
  nights      Int
  adults      Int      @default(1)
  children    Int      @default(0)
  rooms       Int      @default(1)
  roomPrice   Float
  taxAmount   Float    @default(0)
  discountAmount Float @default(0)
  totalAmount Float
  status      String   @default("pending") // pending, confirmed, cancelled, completed
  paymentId   String?
  paymentStatus String @default("pending") // pending, paid, failed, refunded
  guestName   String
  guestEmail  String
  guestPhone  String
  specialRequests String?
  cancellationPolicy String?
  confirmationNumber String? @unique
  checkInTime String?
  checkOutTime String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  room  Room  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@map("hotel_bookings")
}

model Flight {
  id            String   @id @default(uuid())
  airline       String
  flightNumber  String   @unique
  departure     String
  arrival       String
  departureDate DateTime
  departureTime DateTime
  arrivalDate   DateTime
  arrivalTime   DateTime
  duration      String
  basePrice     Float
  discountPrice Float?
  totalSeats    Int      @default(180)
  availableSeats Int
  aircraft      String   @default("Boeing 737")
  flightType    String   @default("domestic")
  classTypes    String     @default("[\"economy\", \"business\"]")
  amenities     String     @default("[]")
  baggage       String     @default("{}")
  isActive      Boolean  @default(true)
  operatingDays String     @default("[1,2,3,4,5,6,7]")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  bookings FlightBooking[]
  
  @@map("flights")
}

model FlightBooking {
  id            String   @id @default(uuid())
  userId        String
  flightId      String
  bookingRef    String   @unique
  pnr           String?  @unique
  passengers    String     // Array of passenger objects
  seatNumbers   String     @default("[]")
  class         String   @default("economy")
  baseAmount    Float
  taxAmount     Float    @default(0)
  feeAmount     Float    @default(0)
  discountAmount Float   @default(0)
  totalAmount   Float
  status        String   @default("pending") // pending, confirmed, cancelled, completed
  paymentId     String?
  paymentStatus String   @default("pending") // pending, paid, failed, refunded
  contactEmail  String
  contactPhone  String
  specialRequests String? 
  baggage       String     @default("{}")
  mealPreference String?
  confirmationNumber String? @unique
  eTicketNumber String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  flight Flight @relation(fields: [flightId], references: [id], onDelete: Cascade)
  
  @@map("flight_bookings")
}

model HotelReview {
  id        String   @id @default(uuid())
  userId    String
  hotelId   String
  rating    Int      @default(5)
  title     String
  comment   String
  guestName String
  guestEmail String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotel Hotel @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  
  @@map("hotel_reviews")
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admins")
}

model Payment {
  id              String   @id @default(uuid())
  bookingId       String
  bookingType     String   // 'hotel' or 'flight'
  amount          Float
  currency        String   @default("INR")
  paymentGateway  String   // 'razorpay' or 'stripe'
  paymentId       String?  // Gateway payment ID
  orderId         String?  // Gateway order ID
  status          String   @default("pending") // pending, completed, failed, refunded
  paymentMethod   String?  // card, netbanking, upi, wallet
  transactionId   String?  @unique
  failureReason   String?
  refundAmount    Float?   @default(0)
  refundStatus    String?  // pending, processed, failed
  metadata        String?  @default("{}")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("payments")
}

model RoomAvailability {
  id        String   @id @default(uuid())
  roomId    String
  date      DateTime 
  available Int      @default(1)
  price     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@unique([roomId, date])
  @@map("room_availability")
}

model RoomInventory {
  id        String   @id @default(uuid())
  roomId    String
  date      DateTime 
  totalRooms Int     @default(1)
  bookedRooms Int    @default(0)
  blockedRooms Int   @default(0)
  dynamicPrice Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  @@unique([roomId, date])
  @@map("room_inventory")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  sessionToken String @unique
  expires   DateTime
  createdAt DateTime @default(now())
  
  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model BookingCancellation {
  id              String   @id @default(uuid())
  bookingId       String
  bookingType     String   // 'hotel' or 'flight'
  reason          String   
  cancellationFee Float    @default(0)
  refundAmount    Float
  status          String   @default("pending") // pending, processed, rejected
  processedAt     DateTime?
  processedBy     String?
  adminNotes      String?  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("booking_cancellations")
}

model PaymentMethod {
  id        String   @id @default(uuid())
  userId    String
  type      String   // 'card', 'upi', 'wallet'
  provider  String   // 'razorpay', 'stripe'
  last4     String?
  brand     String?
  expiryMonth Int?
  expiryYear  Int?
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  metadata  String     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payment_methods")
}

model Train {
  id            String   @id @default(uuid())
  trainNumber   String   @unique
  trainName     String
  departure     String   // Source station
  arrival       String   // Destination station
  departureTime String   // HH:MM format
  arrivalTime   String   // HH:MM format
  duration      String   // Journey duration
  distance      Int      // Distance in km
  frequency     String     @default("[1,2,3,4,5,6,7]") // Days of week (1=Monday)
  trainType     String   @default("Express") // Express, Superfast, Passenger, etc.
  classes       String     @default("[\"SL\", \"3A\", \"2A\", \"1A\"]") // Available classes
  basePrice     Float    // Base price for SL class
  priceMultiplier String   @default("{}")
  totalSeats    Int      @default(800)
  availableSeats Int
  route         String     @default("[]") // Array of intermediate stations
  amenities     String     @default("[]") // Available amenities
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  bookings TrainBooking[]
  
  @@map("trains")
}

model TrainBooking {
  id            String   @id @default(uuid())
  userId        String
  trainId       String
  bookingRef    String   @unique
  pnr           String?  @unique
  passengers    String     // Array of passenger objects
  seatNumbers   String     @default("[]")
  class         String   @default("SL") // SL, 3A, 2A, 1A
  travelDate    DateTime 
  departureStation String
  arrivalStation String
  baseAmount    Float
  taxAmount     Float    @default(0)
  convenienceFee Float   @default(0)
  discountAmount Float   @default(0)
  totalAmount   Float
  status        String   @default("pending") // pending, confirmed, cancelled, completed
  paymentId     String?
  paymentStatus String   @default("pending") // pending, paid, failed, refunded
  contactEmail  String
  contactPhone  String
  specialRequests String? 
  mealPreference String? // veg, non-veg, jain
  confirmationNumber String? @unique
  ticketNumber  String?
  boardingPoint String?
  droppingPoint String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  train Train @relation(fields: [trainId], references: [id], onDelete: Cascade)
  
  @@map("train_bookings")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
